import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.InputStream;
import java.util.List;
import java.util.Map;
import javax.faces.context.FacesContext;
import javax.servlet.ServletOutputStream;
import javax.servlet.http.HttpServletResponse;
import net.sf.jasperreports.engine.JasperExportManager;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;

import net.sf.jasperreports.engine.data.JRBeanCollectionDataSource;
import net.sf.jasperreports.engine.export.JRXlsExporter;
import net.sf.jasperreports.engine.export.ooxml.JRDocxExporter;
import net.sf.jasperreports.export.SimpleExporterInput;
import net.sf.jasperreports.export.SimpleOutputStreamExporterOutput;
import org.apache.commons.io.FileUtils;

public class JasperUtil {
    /**
     * Gera um arquivo PDF com a lista do tipo passado como parâmetro
     * 
     * @param objectList
     */
    public static void gerarPdf(String reportPath, Map<String, Object> paramsMap, List<?> objectList, boolean isUseFieldDescription) throws Exception {
        InputStream is = FacesContext.getCurrentInstance().getExternalContext().getResourceAsStream(reportPath);
        System.out.println("reportPath: " + reportPath);
        JasperPrint print = JasperFillManager.fillReport(is, paramsMap, new JRBeanCollectionDataSource(objectList, isUseFieldDescription));
        byte[] relPrintToPdf = JasperExportManager.exportReportToPdf(print);

        HttpServletResponse httpServletResponse = (HttpServletResponse) FacesContext.getCurrentInstance().getExternalContext().getResponse();
        httpServletResponse.setContentType("application/pdf");
        httpServletResponse.setHeader( "Cache-Control", "no-store" );
        httpServletResponse.setHeader( "Pragma", "no-cache" );
        httpServletResponse.setDateHeader( "Expires", 0 );
        //Envia para o navegador o pdf..
        httpServletResponse.reset();
        ServletOutputStream servletOutputStream = httpServletResponse.getOutputStream();
        servletOutputStream.write(relPrintToPdf);
        servletOutputStream.flush();
        servletOutputStream.close();
    }
    
    public static void gerarPdf(String reportPath, Map<String, Object> paramsMap, List<?> objectList) throws Exception {
        gerarPdf(reportPath, paramsMap, objectList, true);
    }

    /**
     * Gera um arquivo XLS com a lista do tipo passado como parâmetro
     * 
     * @param objectList
     */
    public static void exportarParaExcel(String reportPath, Map<String, Object> paramsMap, List<?> objectList) throws Exception {
        InputStream is = FacesContext.getCurrentInstance().getExternalContext().getResourceAsStream(reportPath);

        JasperPrint jasperPrint = JasperFillManager.fillReport(is, paramsMap, new JRBeanCollectionDataSource(objectList));

        // Exportar para Excel
        JRXlsExporter exporter = new JRXlsExporter();
        exporter.setExporterInput(new SimpleExporterInput(jasperPrint));
        File exportReportFile = new File("fileNameExcel" + ".xls");
        exporter.setExporterOutput(new SimpleOutputStreamExporterOutput(exportReportFile));
        exporter.exportReport();

        HttpServletResponse httpServletResponse = (HttpServletResponse) FacesContext.getCurrentInstance().getExternalContext().getResponse();
        httpServletResponse.reset();
        httpServletResponse.setContentType("application/x-download");
        httpServletResponse.setHeader("Content-Disposition","attachment; filename=fileNameExcel.xls");
        httpServletResponse.setHeader( "Cache-Control", "no-store" );
        httpServletResponse.setHeader( "Pragma", "no-cache" );
        httpServletResponse.setDateHeader( "Expires", 0 );

        ServletOutputStream servletOutputStream = httpServletResponse.getOutputStream();
        servletOutputStream.write(FileUtils.readFileToByteArray(exportReportFile));
        servletOutputStream.flush();
        servletOutputStream.close();
    }

    public static InputStream exportarRelatorioParaInputStream(String reportPath, Map<String, Object> paramsMap, List<?> objectList) throws Exception {
        InputStream is = FacesContext.getCurrentInstance().getExternalContext().getResourceAsStream(reportPath);
        JasperPrint print = JasperFillManager.fillReport(is, paramsMap, new JRBeanCollectionDataSource(objectList));
        byte[] relPrintToPdf = JasperExportManager.exportReportToPdf(print);

        return new ByteArrayInputStream(relPrintToPdf);
    }

    /**
     * Gera um arquivo DOCX com a lista do tipo passado como parâmetro
     * 
     * @param objectList
     */
    public static void exportarParaWord(String reportPath, Map<String, Object> paramsMap, List<?> objectList, boolean isUseFieldDescription) throws Exception {
        InputStream is = FacesContext.getCurrentInstance().getExternalContext().getResourceAsStream(reportPath);
        JasperPrint jasperPrint = JasperFillManager.fillReport(is, paramsMap, new JRBeanCollectionDataSource(objectList, isUseFieldDescription));

        // Exportar para Word
        JRDocxExporter exporter = new JRDocxExporter();
        exporter.setExporterInput(new SimpleExporterInput(jasperPrint));
        File exportReportFile = new File("fileNameWord" + ".docx");
        exporter.setExporterOutput(new SimpleOutputStreamExporterOutput(exportReportFile));
        exporter.exportReport();

        HttpServletResponse httpServletResponse = (HttpServletResponse) FacesContext.getCurrentInstance().getExternalContext().getResponse();
        httpServletResponse.reset();
        httpServletResponse.setContentType("application/x-download");
        httpServletResponse.setHeader("Content-Disposition", "attachment; filename=fileNameWord.docx");
        httpServletResponse.setHeader( "Cache-Control", "no-store" );
        httpServletResponse.setHeader( "Pragma", "no-cache" );
        httpServletResponse.setDateHeader( "Expires", 0 );

        ServletOutputStream servletOutputStream = httpServletResponse.getOutputStream();
        servletOutputStream.write(FileUtils.readFileToByteArray(exportReportFile));
        servletOutputStream.flush();
        servletOutputStream.close();
    }
    
    public static void exportarParaWord(String reportPath, Map<String, Object> paramsMap, List<?> objectList) throws Exception {
        exportarParaWord(reportPath, paramsMap, objectList, true);
    }